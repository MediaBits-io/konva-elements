import * as d3 from 'd3';
// TODO: this pattern does not need baseline (second value in samples) but others maybe do
function filledPath(interpolator) {
    return (context, { data, waveBottom, waveLeft, waveRight, waveTop, waveColor, }) => {
        context.fillStyle = waveColor;
        context.strokeStyle = waveColor;
        context.lineWidth = 2;
        const line = d3.line().context(context);
        if (interpolator) {
            line.curve(interpolator);
        }
        const waveHeight = waveBottom - waveTop;
        const baseline = waveTop + waveHeight / 2;
        const x = d3
            .scalePoint()
            .padding(0.2)
            .domain(d3.range(data.length))
            .range([waveLeft, waveRight]);
        const height = d3
            .scaleLinear()
            .domain([0, 1])
            .range([0, waveHeight / 2]);
        const top = data.map((d, i) => [
            x(i),
            baseline - height(d[0]),
        ]);
        const bottom = data
            .map((d, i) => [x(i), baseline + height(d[0])])
            .reverse();
        // Adjust starting position to smoothen out the curve
        const mid = Math.floor(top.length / 2) - 1;
        const topLeft = top.slice(0, mid);
        const topRight = top.slice(mid);
        topLeft.push(topRight[0]);
        const bottomRight = bottom.slice(0, mid);
        const bottomLeft = bottom.slice(mid);
        const points = [...topRight, ...bottomRight, ...bottomLeft, ...topLeft];
        // Fill waveform
        context.beginPath();
        line(points);
        context.fill();
        // Stroke waveform edges / ensure baseline
        context.beginPath();
        line(points);
        context.stroke();
    };
}
export default filledPath;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsbGVkUGF0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9XYXZlZm9ybS9wYXR0ZXJucy9maWxsZWRQYXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBR3pCLDBGQUEwRjtBQUMxRixTQUFTLFVBQVUsQ0FBQyxZQUE4QjtJQUNoRCxPQUFPLENBQ0wsT0FBaUMsRUFDakMsRUFDRSxJQUFJLEVBQ0osVUFBVSxFQUNWLFFBQVEsRUFDUixTQUFTLEVBQ1QsT0FBTyxFQUNQLFNBQVMsR0FDVSxFQUNyQixFQUFFO1FBQ0YsT0FBTyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDOUIsT0FBTyxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUM7UUFDaEMsT0FBTyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7UUFFdEIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV4QyxJQUFJLFlBQVksRUFBRTtZQUNoQixJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQzFCO1FBRUQsTUFBTSxVQUFVLEdBQUcsVUFBVSxHQUFHLE9BQU8sQ0FBQztRQUV4QyxNQUFNLFFBQVEsR0FBRyxPQUFPLEdBQUcsVUFBVSxHQUFHLENBQUMsQ0FBQztRQUUxQyxNQUFNLENBQUMsR0FBRyxFQUFFO2FBQ1QsVUFBVSxFQUFVO2FBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQUM7YUFDWixNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDN0IsS0FBSyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFFaEMsTUFBTSxNQUFNLEdBQUcsRUFBRTthQUNkLFdBQVcsRUFBRTthQUNiLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUNkLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUU5QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFtQixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQy9DLENBQUMsQ0FBQyxDQUFDLENBQUU7WUFDTCxRQUFRLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBRTtTQUN6QixDQUFDLENBQUM7UUFDSCxNQUFNLE1BQU0sR0FBRyxJQUFJO2FBQ2hCLEdBQUcsQ0FBbUIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUUsRUFBRSxRQUFRLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBRSxDQUFDLENBQUM7YUFDbEUsT0FBTyxFQUFFLENBQUM7UUFFYixxREFBcUQ7UUFDckQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQyxNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNsQyxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWhDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFMUIsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDekMsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVyQyxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsUUFBUSxFQUFFLEdBQUcsV0FBVyxFQUFFLEdBQUcsVUFBVSxFQUFFLEdBQUcsT0FBTyxDQUFDLENBQUM7UUFFeEUsZ0JBQWdCO1FBQ2hCLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDYixPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFZiwwQ0FBMEM7UUFDMUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNiLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNuQixDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsZUFBZSxVQUFVLENBQUMifQ==